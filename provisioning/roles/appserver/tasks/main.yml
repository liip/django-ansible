- name: "Check if nodejs-legacy is needed"
  set_fact:
      nodejs_legacy_pkg: ',nodejs-legacy'
  when: ( ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('16.04', '<=')) or (ansible_distribution == 'Debian' and ansible_distribution_version is version('9', '<='))
- name: Install uwsgi and python and other dependencies
  apt: pkg=uwsgi,uwsgi-plugin-python3,python3-dev,virtualenv,python3-pip,libpq-dev,nodejs{{ nodejs_legacy_pkg }},npm,git,gettext,libjpeg-dev state=present update_cache=true
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Update git repo
  git:
    repo={{ git_repo }}
    dest={{ checkout_dir }}
    version={{ git_branch }}
    accept_hostkey=True
    recursive=False
  tags: deploy

- name: Create virtualenv and install dependencies
  pip: requirements={{ project_dir}}/requirements/base.txt virtualenv={{ root_dir }}/venv virtualenv_python=python3
  tags: deploy

- name: Creates media directory
  file: path={{ root_dir }}/media state=directory

- name: Creates static directory
  file: path={{ root_dir }}/static state=directory

# uwsgi configuration
- name: Create group for app server
  group: name={{ appserver_user}}

- name: Create user for app server
  user: name={{ appserver_user}} group={{ appserver_user}}

- name: Make media directory writeable for appserver_user
  file: name={{ root_dir }}/media owner={{ appserver_user }} group={{ appserver_user }}

- name: Create log file directory
  file: name={{ root_dir }}/logs state=directory owner={{ appserver_user }} group={{ appserver_user }}

- name: Create blank error log file to avoid problem with permissions
  copy: content="" dest={{ root_dir }}/logs/error.log owner={{ appserver_user }} group={{ appserver_user }}

- name: Create blank info log file to avoid problem with permissions
  copy: content="" dest={{ root_dir }}/logs/info.log owner={{ appserver_user }} group={{ appserver_user }}

- name: Create uwsgi config file
  template: src=default.ini dest=/etc/uwsgi/apps-available/{{ project_name }}.ini

- name: Symlink uwsgi config file
  file: src=/etc/uwsgi/apps-available/{{ project_name }}.ini dest=/etc/uwsgi/apps-enabled/{{ project_name }}.ini state=link

# Django configuration
- name: Generate SECRET_KEY file if it does not exist yet
  shell: cat /dev/urandom | tr -dc "abcdefghijklmnopqrstuvwxyz0123456789!@#\$%^&*(-_=+)" | head -c 100 > {{ project_dir }}/envdir/SECRET_KEY creates={{ project_dir }}/envdir/SECRET_KEY

- name: Register subdomains for allowed hosts envdir
  set_fact: subdomain_item="\n{{ item }}.{{ domain }}"
  with_items: "{{ subdomains }}"
  register: subdomains_result
  when: subdomains | length > 0

- name: Gather subdomains for allowed hosts envdir
  set_fact: subdomain_list="{{ subdomains_result.results | map(attribute='ansible_facts.subdomain_item') | join('') }}"
  when: subdomains | length > 0

- name: Generate envdir entries
  copy: dest={{ project_dir }}/envdir/{{ item.setting }} content={{ item.value }}
  with_items:
    - {setting: "DATABASE_URL", value: "postgres://{{ project_name }}:{{ lookup('password', 'auth/database.password') }}@{{ database_host }}/{{ project_name }}"}
    - {setting: "MEDIA_ROOT", value: "{{ root_dir }}/media"}
    - {setting: "STATIC_ROOT", value: "{{ root_dir }}/static"}
    - {setting: "MEDIA_URL", value: "{{ media_url }}"}
    - {setting: "STATIC_URL", value: "{{ static_url }}"}
    - {setting: "ALLOWED_HOSTS", value: "{{ full_domain }}{% if subdomain_list is defined %}{{subdomain_list}}{% endif %}"}
    - {setting: "DJANGO_SETTINGS_MODULE", value: "{{ project_name }}.settings.base"}
    - {setting: "ERROR_LOG_FILE", value: "{{ root_dir }}/logs/error.log"}
    - {setting: "INFO_LOG_FILE", value: "{{ root_dir }}/logs/info.log"}
    - {setting: "URL_PROTOCOL_HOST", value: "http{% if ssl %}s{% endif %}://{{ full_domain }}"}
    - {setting: "ADMINS", value: "{{ admins }}"}
    - {setting: "EMAIL_URL", value: "{{ email_url }}"}
    - {setting: "EMAIL_FROM", value: "{{ email_from }}"}

# Static files
- name: Collect static files
  django_manage: command="collectstatic --noinput" app_path={{ project_dir }} virtualenv={{ root_dir }}/venv/
  tags: deploy

# Database
- name: Migrate database
  django_manage: command="migrate --noinput" app_path={{ project_dir }} virtualenv={{ root_dir }}/venv/
  tags: deploy

# Translations
- name: Compile translation files
  django_manage: command="compilemessages" app_path={{ project_dir }} virtualenv={{ root_dir }}/venv/
  when: translations
  tags: deploy

- name: Restart uwsgi
  service: name=uwsgi state=restarted
  tags: deploy
